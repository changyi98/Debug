using System;
using System.Collections;

using System.Security.Cryptography;
using System.Threading;
using UnityEngine;
/*===========================================New Scprit=================================================*/
public class ThirdPersonMovement : MonoBehaviour
{
    public CharacterController controller;
    public Transform cam;
    public Animator animator;

    public float speed;
    public float gravity = -9.81f;
    public float jumpHeight = 3;
    Vector3 velocity;
    bool isGrounded;
    public Transform groundCheck;
    public float groundDistance = 0.4f;
    public LayerMask groundMask;

    float turnSmoothVelocity;
    public float turnSmoothTime = 0.1f;

    private float lastAttackTime;
    private float continuousTime;
    public int HitCount = 0;
    private bool isAttack = false;

    void Start()
    {
        animator = GetComponent<Animator>();
    }

    public void FixedUpdate()
    {
        Attack();
        Move();
    }
    public void Move()
    {
        //攻擊cd時間
        lastAttackTime -= Time.deltaTime;
        //連擊倒數時間
        continuousTime -= Time.deltaTime;

        //jump
        isGrounded = Physics.CheckSphere(groundCheck.position, groundDistance, groundMask);

        if (!isGrounded)
        {
            animator.SetBool("FreeFall", true);
        }
        else
        {
            animator.SetBool("FreeFall", false);
        }

        if (isGrounded && velocity.y < 0)
        {
            velocity.y = -2f;
            animator.SetBool("Grounded", true);
        }
        else
        {
            animator.SetBool("Grounded", false);
        }

        if (Input.GetKey(KeyCode.Space) && isGrounded)
        {
            velocity.y = Mathf.Sqrt(jumpHeight * -2 * gravity);
            animator.SetTrigger("Jump");
        }
        //gravity
        velocity.y += gravity * Time.deltaTime;
        controller.Move(velocity * Time.deltaTime);
        //walk
        float horizontal = Input.GetAxisRaw("Horizontal");
        float vertical = Input.GetAxisRaw("Vertical");
        Vector3 direction = new Vector3(horizontal, 0f, vertical).normalized;

        Cursor.lockState = CursorLockMode.Locked;

        if (direction.magnitude > 0.1f)
        {
            if (Input.GetKey(KeyCode.LeftShift) && (Input.GetAxis("Horizontal") > 0 || Input.GetAxis("Vertical") > 0 || Input.GetKey(KeyCode.A) || Input.GetKey(KeyCode.S)))
            {
                animator.SetFloat("Speed", 6f);
                speed = 6f;
            }
            else
            {
                animator.SetFloat("Speed", 2f);
                speed = 2f;
            }
            float targetAngle = Mathf.Atan2(direction.x, direction.z) * Mathf.Rad2Deg + cam.eulerAngles.y;
            float angle = Mathf.SmoothDampAngle(transform.eulerAngles.y, targetAngle, ref turnSmoothVelocity, turnSmoothTime);
            transform.rotation = Quaternion.Euler(0f, angle, 0f);

            Vector3 moveDir = Quaternion.Euler(0f, targetAngle, 0f) * Vector3.forward;
            controller.Move(moveDir.normalized * speed * Time.deltaTime);
        }
        else
        {
            animator.SetFloat("Speed", 0f);
        }
    }
    public void Attack()
    {
        //var mouse = Mouse.current;

        //跳躍中不能攻擊，左鍵攻擊，攻擊cd=0
        if (Input.GetMouseButton(0) && lastAttackTime < 0)
        {
            HitCount++;
            switch (HitCount)
            {
                case 1:
                    animator.SetTrigger("atk1");
                    break;
                case 2:
                    animator.SetTrigger("atk2");
                    break;
                case 3:
                    animator.SetTrigger("atk3");
                    break;
                case 4:
                    animator.SetTrigger("atk4");
                    HitCount = 0;
                    break;
            }

            isAttack = true;
            lastAttackTime = 0.5f;
            continuousTime = 1.0f;
            speed = 0f;
        }
        if (isAttack = true && lastAttackTime < 0)
        {
            isAttack = false;
        }
        if (continuousTime < 0)
        {
            HitCount = 0;
        }
    }
}
